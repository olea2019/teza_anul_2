"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.COMMAND_HELP = "Copies one or more files to another location.\n\nSyntax:\nCOPY [-i] [-d] [-v] [-n] [-z] [-l] [-a | -b ] source [-a | -b]\n     [+ source [-a | -b] [+ ...]] [destination [-a | -b]]\n\nComand help or help with one of flags:\nCOPY /H | -h | --help\nCOPY [/F | -f | --flag-name] /H | -h | --help\n\nFlags are case insensitive.\nAlso they can be provided in unix style (-f of --flag) and msdos style (/F).\n\n     source                       Specifies the file or files to be copied.\n     destination                  Specifies the directory and/or filename\n                                  for the new file(s).\n     -e | /E | --enctypt          Indicates to encrypt destination file.\n     -d | /D | --delete           Indicates to delete source files.\n     -v | /V | --verify           Verifies that new files are\n                                  written correctly.\n     -o | /O | --overwrite        Don't answer for overwriting destination\n                                  file (if exists) or not.\n     -z | /Z | --network          Copies networked files in restartable mode.\n     -l | /L | --link             If the source is a symbolic link, copy the\n                                  link to the target instead of the actual file\n                                  the source link points to.\n     -h | /H | --help             Show comand help (this information).\n     -i | /I | --interactive      Interactive mode.\n\nFor concating files specify multiple files:\nfile0, file1, ..., fileN\nWhere files from 0 to n-1 will be concatenated in fileN.\n\nBasic example:\ncopy -a a.txt b.txt c.txt\ncopy -b 1.bin 2.bin 3.bin\ncopy my-file.txt -b my-file.bynaryExtension -a destinationFile.txt -a\n";
//# sourceMappingURL=command.js.map